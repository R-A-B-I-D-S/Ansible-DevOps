#!/usr/bin/env python3
"""
Semaphore Webhook Server –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç webhook'–∏ –æ—Ç Semaphore –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
"""

import json
import os
import sys
import requests
import argparse
from datetime import datetime
from flask import Flask, request, jsonify
from typing import Dict, Any

app = Flask(__name__)

class TelegramNotifier:
    def __init__(self, config_file: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(config_file, 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        
        self.bot_token = self.config['telegram_bot_token']
        self.chat_id = self.config['telegram_chat_id']
        self.topic_id = self.config.get('telegram_topic_id')
        
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
    
    def send_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º topic_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (–¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
            if self.topic_id:
                data['message_thread_id'] = self.topic_id
            
            response = requests.post(self.api_url, data=data, timeout=30)
            response.raise_for_status()
            
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def parse_semaphore_data(self, data: Dict[Any, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Semaphore"""
        result = {
            'task_name': data.get('task', {}).get('template', {}).get('name', 'Unknown Task'),
            'status': data.get('task', {}).get('status', 'unknown'),
            'user': data.get('task', {}).get('user', {}).get('name', 'Unknown User'),
            'created_at': data.get('task', {}).get('created_at', ''),
            'started_at': data.get('task', {}).get('started_at', ''),
            'ended_at': data.get('task', {}).get('ended_at', ''),
            'project_name': data.get('project', {}).get('name', 'Unknown Project'),
            'output': data.get('task', {}).get('output', ''),
            'errors': []
        }
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
        if result['output']:
            result['servers'] = self.parse_ansible_output(result['output'])
        else:
            result['servers'] = {}
        
        return result
    
    def parse_ansible_output(self, output: str) -> Dict[str, Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ Ansible –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö"""
        servers = {}
        lines = output.split('\n')
        current_server = None
        
        for line in lines:
            line = line.strip()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            if 'PLAY [' in line and ']' in line:
                server_match = line.split('[')[1].split(']')[0]
                current_server = server_match
                servers[current_server] = {
                    'status': 'unknown',
                    'tasks': [],
                    'errors': []
                }
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
            if current_server and ('ok=' in line or 'changed=' in line or 'failed=' in line):
                if 'failed=' in line and 'failed=0' not in line:
                    servers[current_server]['status'] = 'failed'
                elif servers[current_server]['status'] != 'failed':
                    servers[current_server]['status'] = 'success'
        
        return servers
    
    def format_message(self, parsed_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —ç–º–æ–¥–∑–∏
        if parsed_data['status'] == 'success':
            status_emoji = "‚úÖ"
            status_text = "–£–°–ü–ï–®–ù–û"
        elif parsed_data['status'] == 'error':
            status_emoji = "‚ùå"
            status_text = "–° –û–®–ò–ë–ö–ê–ú–ò"
        else:
            status_emoji = "‚ö†Ô∏è"
            status_text = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        try:
            if parsed_data['started_at'] and parsed_data['ended_at']:
                start_time = datetime.fromisoformat(parsed_data['started_at'].replace('Z', '+00:00'))
                end_time = datetime.fromisoformat(parsed_data['ended_at'].replace('Z', '+00:00'))
                duration = end_time - start_time
                duration_str = f"{duration.seconds // 60}m {duration.seconds % 60}s"
            else:
                duration_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except:
            duration_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message_lines = [
            f"<b>{status_emoji} {parsed_data['task_name'].upper()} - {status_text}</b>",
            f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {parsed_data['user']}",
            f"üìÅ <b>–ü—Ä–æ–µ–∫—Ç:</b> {parsed_data['project_name']}",
            f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_str}",
            ""
        ]
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        if parsed_data['servers']:
            message_lines.append("<b>üìã –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:</b>")
            
            successful_count = 0
            failed_count = 0
            
            for server_name, server_data in parsed_data['servers'].items():
                if server_data['status'] == 'success':
                    server_emoji = "‚úÖ"
                    successful_count += 1
                elif server_data['status'] == 'failed':
                    server_emoji = "‚ùå"
                    failed_count += 1
                else:
                    server_emoji = "‚ö†Ô∏è"
                
                message_lines.append(f"{server_emoji} <b>{server_name}</b>")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_servers = len(parsed_data['servers'])
            message_lines.append("")
            message_lines.append(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {successful_count}/{total_servers} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            if failed_count > 0:
                message_lines.append(f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed_count}")
        
        # –ü–æ–¥–ø–∏—Å—å
        message_lines.append("")
        message_lines.append("<i>ü§ñ Semaphore Webhook Bot</i>")
        
        return "\n".join(message_lines)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
notifier = None

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–∞ –æ—Ç Semaphore"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            return jsonify({'error': 'Unauthorized'}), 401
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No data received'}), 400
        
        print(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Semaphore: {data.get('task', {}).get('template', {}).get('name', 'Unknown')}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        parsed_data = notifier.parse_semaphore_data(data)
        message = notifier.format_message(parsed_data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        success = notifier.send_message(message)
        
        if success:
            return jsonify({'status': 'success', 'message': 'Notification sent'})
        else:
            return jsonify({'status': 'error', 'message': 'Failed to send notification'}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/test', methods=['POST'])
def test():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        test_message = f"""ü§ñ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

<i>ü§ñ Semaphore Webhook Bot</i>"""
        
        success = notifier.send_message(test_message)
        
        if success:
            return jsonify({'status': 'success', 'message': 'Test message sent'})
        else:
            return jsonify({'status': 'error', 'message': 'Failed to send test message'}), 500
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Semaphore Webhook Server –¥–ª—è Telegram")
    parser.add_argument("--config", required=True, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--host", default="0.0.0.0", help="–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")
    parser.add_argument("--debug", action="store_true", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not os.path.exists(args.config):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.config}")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    global notifier
    try:
        notifier = TelegramNotifier(args.config)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    print(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {args.host}:{args.port}")
    print(f"üì° Webhook URL: http://{args.host}:{args.port}/webhook")
    print(f"‚ù§Ô∏è Health check: http://{args.host}:{args.port}/health")
    print(f"üß™ Test endpoint: http://{args.host}:{args.port}/test")
    
    app.run(host=args.host, port=args.port, debug=args.debug)

if __name__ == "__main__":
    main()
