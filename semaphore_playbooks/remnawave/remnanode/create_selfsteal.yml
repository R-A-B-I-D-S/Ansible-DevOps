---
- name: Deploy Caddy with two websites
  hosts: all
  become: yes
  vars:
    base_dir: "/etc/ansible/remnawave/remnanode"
    working_dir: "/opt/caddy"

  tasks:
    # 1) Проверка установки Docker
    - name: Check if Docker is installed
      command: docker --version
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Fail if Docker is not installed
      fail:
        msg: "Docker is not installed. Please install Docker first."
      when: docker_check.rc != 0


    # 2) Создание рабочих директорий на удаленном сервере
    - name: Create working directories on server
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ working_dir }}"
        - "{{ working_dir }}/data"
        - "{{ working_dir }}/logs"
        - "/var/www/mos-drywall.shop"
        - "/var/www/my-rebar.shop"

    # 3) Копирование Caddyfile из локальной папки caddy/
    - name: Copy Caddyfile
      copy:
        src: "{{ base_dir }}/caddy/Caddyfile"
        dest: "{{ working_dir }}/Caddyfile"
        mode: '0644'

    # 4) Копирование файлов сайтов из локальных папок
    - name: Copy mos-drywall.shop website files
      copy:
        src: "{{ base_dir }}/mos-drywall.shop/"
        dest: "/var/www/mos-drywall.shop/"
        mode: '0644'
        directory_mode: '0755'

    - name: Copy my-rebar.shop website files
      copy:
        src: "{{ base_dir }}/my-rebar.shop/"
        dest: "/var/www/my-rebar.shop/"
        mode: '0644'
        directory_mode: '0755'

    # 5) Копирование docker-compose.yml из локальной папки caddy/
    - name: Copy docker-compose.yml
      copy:
        src: "{{ base_dir }}/caddy/docker-compose.yml"
        dest: "{{ working_dir }}/docker-compose.yml"
        mode: '0644'

    # 6) Запуск контейнера через Docker Compose\

    - name: Запустить контейнер remnanode через Docker Compose
      shell: |
        docker compose down
      args:
        chdir: "{{ working_dir }}"

    - name: Запустить контейнер remnanode через Docker Compose
      shell: |
        docker compose up -d
      args:
        chdir: "{{ working_dir }}"

    # → Получаем имя контейнера Caddy
    - name: Fetch Caddy container name
      command: >
        docker ps --format "{{'{{.Names}}'}}"
        --filter "name=caddy"
        --filter "status=running"
      register: caddy_container_search
      changed_when: false

    - name: Fail if no running Caddy container found
      fail:
        msg: "No running Caddy container found. Check docker-compose and container status."
      when: caddy_container_search.stdout_lines | length == 0

    - name: Set Caddy container name
      set_fact:
        caddy_container_name: "{{ caddy_container_search.stdout_lines | first }}"

    - name: Extract and display obtained domains from logs
      set_fact:
        obtained_domains: >-
          {{
            caddy_logs.stdout |
            regex_findall('certificate obtained for ([^\\s,]+)') |
            map('trim') | list | unique
          }}
      when: caddy_logs.stdout is defined

    # 7) Проверка работы сайтов
    - name: Wait for Caddy to start
      wait_for:
        port: 80
        host: 127.0.0.1
        delay: 2
        timeout: 30

    - name: Check HTTP to HTTPS redirect for mos-drywall.shop
      uri:
        url: "http://localhost/"
        method: GET
        headers:
          Host: "mos-drywall.shop"
        status_code: 301
        follow_redirects: no
      register: redirect_check_mos

    - name: Check HTTP to HTTPS redirect for my-rebar.shop
      uri:
        url: "http://localhost/"
        method: GET
        headers:
          Host: "my-rebar.shop"
        status_code: 301
        follow_redirects: no
      register: redirect_check_rebar

    # Проверяем, установлен ли tree
    - name: Check if 'tree' command is available
      command: which tree
      register: tree_check
      ignore_errors: yes
      changed_when: false

    # Устанавливаем tree, если не найден (Debian/Ubuntu)
    - name: Install tree package (Debian/Ubuntu)
      apt:
        name: tree
        state: present
        update_cache: yes
      when: tree_check.rc != 0 and ansible_os_family == "Debian"

    # Устанавливаем tree, если не найден (RHEL/CentOS/Fedora)
    - name: Install tree package (RHEL/CentOS/Fedora)
      yum:
        name: tree
        state: present
      when: tree_check.rc != 0 and ansible_os_family == "RedHat"

    - name: Install tree package (AlmaLinux/Rocky Linux)
      dnf:
        name: tree
        state: present
      when: tree_check.rc != 0 and ansible_os_family == "RedHat" and ansible_distribution in ["AlmaLinux", "Rocky"]

    # Выполняем и выводим tree
    - name: Show directory structure with tree
      command: tree "{{ working_dir }}"
      register: tree_output
      changed_when: false

    - name: Display tree output
      debug:
        msg: |
          🌲 Directory Structure:
          {{ tree_output.stdout }}

    # → Получаем последние 50 строк логов Caddy для отладки
    - name: Fetch last 50 lines of Caddy container logs
      command: docker logs --tail 50 "{{ caddy_container_name }}"
      register: caddy_logs
      changed_when: false

    - name: Display last 50 lines of Caddy logs
      debug:
        msg: |
          📜 LAST 50 LINES OF CADDY LOGS:
          {{ caddy_logs.stdout }}

    # 8) Wait for certificate files to appear (up to 5 minutes)
    - name: Wait for certificate files for mos-drywall.shop
      wait_for:
        path: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mos-drywall.shop/mos-drywall.shop.crt"
        timeout: 300
      register: cert_wait_mos_crt

    - name: Wait for key file for mos-drywall.shop
      wait_for:
        path: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mos-drywall.shop/mos-drywall.shop.key"
        timeout: 300
      register: cert_wait_mos_key

    - name: Wait for JSON metadata for mos-drywall.shop
      wait_for:
        path: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mos-drywall.shop/mos-drywall.shop.json"
        timeout: 300
      register: cert_wait_mos_json

    - name: Wait for certificate files for my-rebar.shop
      wait_for:
        path: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/my-rebar.shop/my-rebar.shop.crt"
        timeout: 300
      register: cert_wait_rebar_crt

    - name: Wait for key file for my-rebar.shop
      wait_for:
        path: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/my-rebar.shop/my-rebar.shop.key"
        timeout: 300
      register: cert_wait_rebar_key

    - name: Wait for JSON metadata for my-rebar.shop
      wait_for:
        path: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/my-rebar.shop/my-rebar.shop.json"
        timeout: 300
      register: cert_wait_rebar_json

    # 9) Read certificate metadata JSON files
    - name: Read mos-drywall.shop certificate metadata
      slurp:
        src: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mos-drywall.shop/mos-drywall.shop.json"
      register: mos_json_raw
      when: cert_wait_mos_json is succeeded

    - name: Parse mos-drywall.shop JSON
      set_fact:
        mos_cert_data: "{{ mos_json_raw.content | b64decode | from_json }}"
      when: mos_json_raw is defined and mos_json_raw.content is defined

    - name: Read my-rebar.shop certificate metadata
      slurp:
        src: "{{ working_dir }}/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/my-rebar.shop/my-rebar.shop.json"
      register: rebar_json_raw
      when: cert_wait_rebar_json is succeeded

    - name: Parse my-rebar.shop JSON
      set_fact:
        rebar_cert_data: "{{ rebar_json_raw.content | b64decode | from_json }}"
      when: rebar_json_raw is defined and rebar_json_raw.content is defined

    # 10) Set facts for certificate obtained status
    - name: Set certificate obtained flags
      set_fact:
        mos_cert_obtained: "{{ mos_cert_data is defined and 'sans' in mos_cert_data and 'mos-drywall.shop' in mos_cert_data.sans }}"
        rebar_cert_obtained: "{{ rebar_cert_data is defined and 'sans' in rebar_cert_data and 'my-rebar.shop' in rebar_cert_data.sans }}"

    # 11) Fail if certificates not obtained
    - name: Fail if mos-drywall.shop certificate not obtained
      fail:
        msg: "Certificate for mos-drywall.shop was not obtained within 5 minutes."
      when: not mos_cert_obtained

    - name: Fail if my-rebar.shop certificate not obtained
      fail:
        msg: "Certificate for my-rebar.shop was not obtained within 5 minutes."
      when: not rebar_cert_obtained

    # 12) Вывод результатов
    - name: Show deployment and SSL results
      debug:
        msg:
          - "✅ remnanode container running"
          - "✅ Caddy started and obtained certificate for mos-drywall.shop => {{ mos_cert_obtained }}"
          - "✅ Caddy started and obtained certificate for my-rebar.shop  => {{ rebar_cert_obtained }}"
          - "🔁 mos-drywall.shop redirect => {{ redirect_check_mos.status | default('n/a') }}"
          - "🔁 my-rebar.shop redirect => {{ redirect_check_rebar.status | default('n/a') }}"
          - "🌐 mos-drywall.shop HTTPS => {{ site_check_mos.status | default('n/a') }}"
          - "🌐 my-rebar.shop HTTPS => {{ site_check_rebar.status | default('n/a') }}"
          - "--- Certificate Issuer Info (mos-drywall.shop) ---"
          - "Issuer URL => {{ mos_cert_data.issuer_data.url | default('N/A') }}"
          - "Renewal Window => {{ mos_cert_data.issuer_data.renewal_info.suggestedWindow.start | default('N/A') }} to {{ mos_cert_data.issuer_data.renewal_info.suggestedWindow.end | default('N/A') }}"
          - "--- Certificate Issuer Info (my-rebar.shop) ---"
          - "Issuer URL => {{ rebar_cert_data.issuer_data.url | default('N/A') }}"
          - "Renewal Window => {{ rebar_cert_data.issuer_data.renewal_info.suggestedWindow.start | default('N/A') }} to {{ rebar_cert_data.issuer_data.renewal_info.suggestedWindow.end | default('N/A') }}"
