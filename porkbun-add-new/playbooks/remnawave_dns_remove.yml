---
- name: üóëÔ∏è –£–¥–∞–ª–∏—Ç—å A-–∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ Remnawave –∏–∑ DNS Porkbun
  hosts: localhost
  gather_facts: no

  tasks:

    # --- –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏–∑ Remnawave API ---
    - name: üåê –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏–∑ Remnawave
      uri:
        url: "https://{{ remnawave_domain }}/api/nodes"
        method: GET
        headers:
          Authorization: "Bearer {{ remnawave_token }}"
        return_content: yes
        timeout: 30
      register: remnawave_response
      until: remnawave_response.status == 200
      retries: 3
      delay: 5

    - name: ‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É Remnawave API
      fail:
        msg: "Remnawave API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {{ remnawave_response.json.message | default('Unknown error') }}"
      when: remnawave_response.json is defined and remnawave_response.json.errorCode is defined

    - name: üß© –ò–∑–≤–ª–µ—á—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã (isNodeOnline == true)
      set_fact:
        active_nodes: >-
          {{
            remnawave_response.json.response
            | selectattr('isNodeOnline', 'equalto', true)
            | list
          }}

    - name: üìÑ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥
      debug:
        msg: |-
          –ê–ö–¢–ò–í–ù–´–ï –ù–û–î–´ ({{ active_nodes | length }} —à—Ç.):
          {% for node in active_nodes %}
          {{ "%2d" % loop.index }}) {{ node.name }} ‚Üí {{ node.address }}
          {% endfor %}

    - name: üü° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º DNS-–æ–ø–µ—Ä–∞—Ü–∏–∏
      debug:
        msg: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –≤ Remnawave. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ."
      when: active_nodes | length == 0

    # --- –®–ê–ì 2: –ü–æ–ª—É—á–∏—Ç—å DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤ ---
    - name: üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/retrieve/{{ item }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        return_content: yes
      register: dns_retrieve_results
      loop: "{{ target_domains }}"
      loop_control:
        label: "{{ item }}"

    # --- –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã Porkbun ---
    - name: ‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É Porkbun API
      fail:
        msg: "Porkbun API error for {{ item }}: {{ result.json.message | default('Unknown') }}"
      when: result.json.status != "SUCCESS"
      loop: "{{ target_domains }}"
      loop_control:
        label: "{{ item }}"
      vars:
        result: "{{ dns_retrieve_results.results | selectattr('item', 'equalto', item) | first }}"

    # --- –®–ê–ì 4: –°–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É A-–∑–∞–ø–∏—Å–µ–π ---
    - name: üß© –ü–æ—Å—Ç—Ä–æ–∏—Ç—å existing_a_records_map
      set_fact:
        existing_a_records_map: "{{ existing_a_records_map | default({}) | combine({ item: (records | map(attribute='content') | zip(records | map(attribute='id')) | list) }) }}"
      loop: "{{ target_domains }}"
      loop_control:
        label: "{{ item }}"
      vars:
        records: >-
          {{
            (
              (dns_retrieve_results.results | selectattr('item', 'equalto', item) | first).json.records
              | selectattr('type', 'equalto', 'A')
              | selectattr('name', 'in', ['@', item])
              | list
            )
          }}

    - name: üß© –ò–∑–≤–ª–µ—á—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö IP
      set_fact:
        active_ips_set: "{{ active_nodes | map(attribute='address') | map('trim') | list | unique }}"

    # --- –®–ê–ì 5: –ù–∞–π—Ç–∏ –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
    - name: üß© –ù–∞–π—Ç–∏ –ª–∏—à–Ω–∏–µ A-–∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      set_fact:
        orphaned_records: >-
          {{
            orphaned_records | default({}) | combine({
              domain: (
                (existing_a_records_map[domain] | default([]))
                | selectattr('0', 'not in', active_ips_set)
                | list
              )
            })
          }}
      loop: "{{ target_domains }}"
      loop_control:
        loop_var: domain

    - name: üêû DEBUG ‚Äî orphaned_records (IP ‚Üí ID)
      debug:
        var: orphaned_records

    - name: üìÑ –°–≤–æ–¥–∫–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      debug:
        msg: |-
          –î–û–ú–ï–ù: {{ domain }}
          {% if records | length > 0 %}
          –ù–∞–π–¥–µ–Ω–æ –ª–∏—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: {{ records | length }}
          {% for ip, id in records %}
          ‚Üí {{ ip }} (ID: {{ id }})
          {% endfor %}
          {% else %}
          ‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          {% endif %}
      loop: "{{ orphaned_records | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      vars:
        domain: "{{ item.key }}"
        records: "{{ item.value }}"

    - name: üßÆ –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      set_fact:
        total_orphaned: "{{ orphaned_records | dict2items | map(attribute='value') | map('length') | sum }}"

    - name: üõë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ
      pause:
        prompt: "‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {{ total_orphaned }} –∑–∞–ø–∏—Å–µ–π. –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã"
      register: confirmation
      when: total_orphaned | int > 0

    - name: üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ A-–∑–∞–ø–∏—Å–∏
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/delete/{{ domain }}/{{ record_id }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        status_code: 200
      loop: "{{ orphaned_records | dict2items | subelements('value') }}"
      loop_control:
        label: "{{ item.0.key }} ‚Üí {{ item.1.0 }}"
      vars:
        domain: "{{ item.0.key }}"
        record_id: "{{ item.1.1 }}"
      when: confirmation.user_input | default('no') == 'yes'
      register: delete_results

    - name: ‚úÖ –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ—à–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏—è—Ö
      debug:
        msg: "‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {{ item.item.0.key }} ‚Üí {{ item.item.1.0 }} (ID: {{ item.item.1.1 }})"
      loop: "{{ delete_results.results | default([]) }}"
      when: item.status_code == 200

    - name: ‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
      debug:
        msg: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {{ item.item.0.key }} ‚Üí {{ item.item.1.0 }}: {{ item.status }} {{ item.status_text }}"
      loop: "{{ delete_results.results | default([]) }}"
      when: item.status_code != 200

    - name: üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
      debug:
        msg: |-
          {% set total_deleted = (delete_results.results | default([]) | selectattr('status_code', 'equalto', 200) | list | length) %}
          {% if total_deleted > 0 %}
          ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {{ total_deleted }}
          {% else %}
          ‚ÑπÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å.
          {% endif %}
