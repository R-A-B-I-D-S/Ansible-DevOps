---
- name: ❌ Удалить A-записи неактивных нод
  hosts: localhost
  gather_facts: no

  vars:
    domains_to_process: "{{ target_domains }}"

  tasks:

    # --- ШАГ 1: Получить список всех нод из Remnawave ---
    - name: 🌐 Получить все ноды из Remnawave
      uri:
        url: "https://{{ remnawave_domain }}/api/nodes"
        method: GET
        headers:
          Authorization: "Bearer {{ remnawave_token }}"
        return_content: yes
      register: remnawave_response

    - name: ❌ Проверить ошибку Remnawave API
      fail:
        msg: "Remnawave API вернул ошибку: {{ remnawave_response.json.message | default('Unknown error') }}"
      when: remnawave_response.json is defined and remnawave_response.json.errorCode is defined

    - name: 🧩 Извлечь активные ноды
      set_fact:
        active_nodes: >-
          {{
            remnawave_response.json.response
            | selectattr('isNodeOnline', 'equalto', true)
            | map(attribute='address')
            | map('trim')
            | list
          }}

    - name: 📄 Вывести активные ноды
      debug:
        msg: "Активные ноды: {{ active_nodes }}"

    # --- ШАГ 2: Получить DNS-записи для домена ---
    - name: 🔍 Получить DNS-записи домена
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/retrieve/{{ item }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        return_content: yes
      register: dns_retrieve_results
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"

    - name: ❌ Проверить ошибки Porkbun API
      fail:
        msg: "Ошибка Porkbun для {{ item }}: {{ result.json.message | default('Unknown') }}"
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"
      vars:
        result: "{{ dns_retrieve_results.results | selectattr('item', 'equalto', item) | first }}"
      when: result.json is defined and result.json.status != "SUCCESS"

    # --- ШАГ 3: Найти A-записи неактивных нод ---
    - name: 🧩 Определить A-записи неактивных нод
      set_fact:
        inactive_records: >-
          {{
            inactive_records | default([]) + (
              (dns_retrieve_results.results | selectattr('item', 'equalto', domain) | first).json.records
              | selectattr('type', 'equalto', 'A')
              | selectattr('name', 'equalto', domain)
              | rejectattr('content', 'in', active_nodes)
              | list
            )
          }}
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"
      vars:
        domain: "{{ item }}"

    - name: 📄 Вывести A-записи неактивных нод
      debug:
        msg: "Для домена {{ item }} будут удалены: {{ inactive_records }}"
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"
      vars:
        inactive_records: "{{ inactive_records | selectattr('name', 'equalto', item) | list }}"

    - name: 🗑️ Удалить A-записи неактивных нод через Porkbun
      vars:
        domain_inactive_records: >-
          {{
            (dns_retrieve_results.results | selectattr('item', 'equalto', domain) | first).json.records
            | selectattr('type', 'equalto', 'A')
            | rejectattr('content', 'in', active_nodes)
            | list
          }}
      loop: "{{ domains_to_process }}"
      loop_control:
        loop_var: domain
      when: domain_inactive_records | length > 0
      block:

    - name: 📄 Удаляем записи для домена {{ domain }}
      debug:
        msg: "Удаляем {{ item.content }} (ID {{ item.id }})"
      loop: "{{ domain_inactive_records }}"
      loop_control:
        label: "{{ item.content }}"

    - name: 🗑️ API вызов удаления записи
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/delete/{{ domain }}/{{ item.id }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        status_code: 200
      loop: "{{ domain_inactive_records }}"
      loop_control:
        label: "{{ item.content }}"

    - name: ✅ Отчёт об удалении
      debug:
        msg: "✅ Удалена запись {{ item.1.name }} → {{ item.1.content }}"
      loop: "{{ domains_to_process | product(inactive_records) | list }}"
      loop_control:
        label: "{{ item.0 }} → {{ item.1.content }}"
      vars:
        domain: "{{ item.0 }}"
        record: "{{ item.1 }}"
        inactive_records: >-
          {{
            (dns_retrieve_results.results | selectattr('item', 'equalto', domain) | first).json.records
            | selectattr('type', 'equalto', 'A')
            | rejectattr('content', 'in', active_nodes)
            | list
          }}
