---
- name: üóëÔ∏è –£–¥–∞–ª–∏—Ç—å A-–∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ Remnawave –∏–∑ DNS Porkbun
  hosts: localhost
  gather_facts: no
  vars:
    domains_to_process: "{{ target_domains }}"

  tasks:

    # --- –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏–∑ Remnawave API ---
    - name: üåê –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏–∑ Remnawave
      uri:
        url: "https://{{ remnawave_domain }}/api/nodes"
        method: GET
        headers:
          Authorization: "Bearer {{ remnawave_token }}"
        return_content: yes
        timeout: 30
      register: remnawave_response
      until: remnawave_response.status == 200
      retries: 3
      delay: 5

    - name: ‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É Remnawave API
      fail:
        msg: "Remnawave API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {{ remnawave_response.json.message | default('Unknown error') }}"
      when:
        - remnawave_response.json is defined
        - remnawave_response.json.errorCode is defined

    - name: üß© –ò–∑–≤–ª–µ—á—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã (isNodeOnline == true)
      set_fact:
        active_nodes: >-
          {{
            remnawave_response.json.response
            | selectattr('isNodeOnline', 'equalto', true)
            | list
          }}

    - name: üìÑ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥
      debug:
        msg: |-
          –ê–ö–¢–ò–í–ù–´–ï –ù–û–î–´ ({{ active_nodes | length }} —à—Ç.):
          {% for node in active_nodes %}
          {{ "%2d" % loop.index }}) {{ node.name }} ‚Üí {{ node.address }}
          {% endfor %}
      when: active_nodes | length > 0

    - name: üü° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º DNS-–æ–ø–µ—Ä–∞—Ü–∏–∏
      debug:
        msg: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –≤ Remnawave. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ."
      when: active_nodes | length == 0
      when: active_nodes | length == 0

    # --- –®–ê–ì 2: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤ ---
    - name: üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/retrieve/{{ item }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        return_content: yes
      register: dns_retrieve_results
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"
      when: active_nodes | length > 0

    # --- –®–ê–ì 3: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å existing_a_records_map = { "domain": { "IP": "record_id" } } ---
    - name: üß© –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö A-–∑–∞–ø–∏—Å–µ–π
      set_fact:
        existing_a_records_map: >-
          {{
            existing_a_records_map | default({}) |
            combine({
              item.item: (
                item.json.records
                | selectattr('type', 'equalto', 'A')
                | map(attribute='content')
                | zip(
                    item.json.records
                    | selectattr('type', 'equalto', 'A')
                    | map(attribute='id')
                  )
                | list
                | items2dict
              )
            })
          }}
      loop: "{{ dns_retrieve_results.results }}"
      when:
        - active_nodes | length > 0
        - item.json is defined
        - item.json.status == "SUCCESS"

    - name: üêû DEBUG ‚Äî existing_a_records_map
      debug:
        var: existing_a_records_map
      when: active_nodes | length > 0

    # --- –®–ê–ì 4: –ò–∑–≤–ª–µ—á—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö IP ---
    - name: üß© –ò–∑–≤–ª–µ—á—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö IP
      set_fact:
        active_ips_set: "{{ active_nodes | map(attribute='address') | map('trim') | list | unique }}"
      when: active_nodes | length > 0

    # --- –®–ê–ì 5: –ù–∞–π—Ç–∏ –ª–∏—à–Ω–∏–µ A-–∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ---
    - name: üß© –ù–∞–π—Ç–∏ –ª–∏—à–Ω–∏–µ A-–∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      set_fact:
        orphaned_records: >-
          {{
            existing_a_records_map
            | dict2items
            | map('combine', {
                'orphaned': (
                  item.value | dict2items
                  | selectattr('key', 'not in', active_ips_set)
                  | list | items2dict
                )
              })
            | selectattr('orphaned', 'ne', {})
            | map('combine', {'value': item.orphaned})
            | map(attribute='value')
            | items2dict
          }}
      when: active_nodes | length > 0

    - name: üêû DEBUG ‚Äî orphaned_records (IP ‚Üí ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
      debug:
        var: orphaned_records
      when: active_nodes | length > 0

    - name: üìÑ –°–≤–æ–¥–∫–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –¥–æ–º–µ–Ω–∞–º
      debug:
        msg: |-
          –î–û–ú–ï–ù: {{ domain }}
          –ù–∞–π–¥–µ–Ω–æ –ª–∏—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: {{ count }}
          {% for ip, id in records.items() %}
          ‚Üí {{ ip }} (ID: {{ id }})
          {% endfor %}
      loop: "{{ orphaned_records | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      vars:
        domain: "{{ item.key }}"
        records: "{{ item.value }}"
        count: "{{ item.value | length }}"
      when: orphaned_records | length > 0

    # --- –®–ê–ì 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
    - name: üõë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–≤–≤–µ–¥–∏—Ç–µ 'yes')
      pause:
        prompt: "‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {{ orphaned_records | dict2items | map(attribute='value') | map('length') | sum }} –∑–∞–ø–∏—Å–µ–π. –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã"
      register: confirmation
      when: orphaned_records | length > 0

    # --- –®–ê–ì 7: –£–¥–∞–ª–µ–Ω–∏–µ A-–∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ Porkbun ---
    - name: üóëÔ∏è –£–¥–∞–ª—è–µ–º A-–∑–∞–ø–∏—Å–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/delete/{{ item.0.key }}/{{ item.1.1 }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        status_code: 200
      loop: "{{ orphaned_records | dict2items | subelements('value') }}"
      loop_control:
        label: "{{ item.0.key }} ‚Üí {{ item.1.0 }} (ID: {{ item.1.1 }})"
      register: delete_results
      when:
        - orphaned_records | length > 0
        - confirmation.user_input | default('no') == 'yes'

    # --- –®–ê–ì 8: –û—Ç—á—ë—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ ---
    - name: ‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
      debug:
        msg: "‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {{ domain }} ‚Üí {{ ip }} (ID: {{ record_id }})"
      loop: "{{ delete_results.results | default([]) }}"
      loop_control:
        label: "{{ item.item.0.key }} ‚Üí {{ item.item.1.0 }}"
      vars:
        domain: "{{ item.item.0.key }}"
        ip: "{{ item.item.1.0 }}"
        record_id: "{{ item.item.1.1 }}"
      when:
        - item is defined
        - item.status == 200

    - name: ‚ùå –û—Ç—á—ë—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
      debug:
        msg: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {{ domain }} ‚Üí {{ ip }} (ID: {{ record_id }}): {{ item.status }} {{ item.msg | default('') }}"
      loop: "{{ delete_results.results | default([]) }}"
      loop_control:
        label: "{{ item.item.0.key }} ‚Üí {{ item.item.1.0 }}"
      vars:
        domain: "{{ item.item.0.key }}"
        ip: "{{ item.item.1.0 }}"
        record_id: "{{ item.item.1.1 }}"
      when:
        - item is defined
        - item.status != 200

    # --- –®–ê
