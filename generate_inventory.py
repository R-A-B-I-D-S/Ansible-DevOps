#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ actual_servers.yml –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤ vpn-*.tgvpnbot.com
"""

import socket
import argparse
import yaml
import sys
from typing import Dict, List, Optional


def ping_domain(domain: str, timeout: int = 3) -> Optional[str]:
    """
    –ü–∏–Ω–≥—É–µ—Ç –¥–æ–º–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IP-–∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –¥–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    try:
        ip = socket.gethostbyname(domain)
        return ip
    except socket.gaierror:
        return None


def generate_inventory(start_num: int, end_num: int, 
                      domain_template: str = "vpn-{}.tgvpnbot.com",
                      output_file: str = "actual_servers.yml",
                      ansible_user: str = "vpnuser",
                      ansible_port: int = 11041) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inventory —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤
    """
    
    print(f"üîç –ü–∏–Ω–≥—É–µ–º –¥–æ–º–µ–Ω—ã –æ—Ç {start_num} –¥–æ {end_num}...")
    
    inventory = {
        'all': {
            'children': {
                'servers': {
                    'hosts': {}
                }
            },
            'hosts': {
                'localhost': {
                    'ansible_connection': 'local'
                }
            }
        }
    }
    
    successful_pings = 0
    failed_pings = 0
    
    for num in range(start_num, end_num + 1):
        domain = domain_template.format(num)
        print(f"  –ü–∏–Ω–≥—É–µ–º {domain}...", end=" ")
        
        ip = ping_domain(domain)
        
        if ip:
            print(f"‚úÖ {ip}")
            successful_pings += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
            if num == 8:
                server_name = "router-1"
            elif num == 61:
                server_name = "router-2"
            else:
                server_name = f"server-{num}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ inventory
            inventory['all']['children']['servers']['hosts'][f'server-{num}'] = {
                'ansible_host': ip,
                'ansible_user': ansible_user,
                'ansible_port': ansible_port,
                'server_domain': domain,
                'server_name': server_name
            }
        else:
            print("‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            failed_pings += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º inventory –≤ —Ñ–∞–π–ª
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º inventory –≤ {output_file}...")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("---\n")
            f.write("all:\n")
            f.write("    children:\n")
            f.write("        servers:\n")
            f.write("            hosts:\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏
            server_hosts = inventory['all']['children']['servers']['hosts']
            for i, (server_name, server_data) in enumerate(server_hosts.items()):
                f.write(f"                {server_name}:\n")
                f.write(f"                    ansible_host: {server_data['ansible_host']}\n")
                f.write(f"                    ansible_user: {server_data['ansible_user']}\n")
                f.write(f"                    ansible_port: {server_data['ansible_port']}\n")
                f.write(f"                    server_domain: \"{server_data['server_domain']}\"\n")
                f.write(f"                    server_name: \"{server_data['server_name']}\"\n")
                f.write(f"                    ansible_backup_files:\n")
                f.write(f"                        - /etc/x-ui/x-ui.db\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(server_hosts) - 1:
                    f.write("\n")
            
            f.write("\n")
            f.write("    hosts:\n")
            f.write("        localhost:\n")
            f.write("            ansible_connection: local\n")
        
        print(f"‚úÖ Inventory —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤: {successful_pings}")
        print(f"   - –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤: {failed_pings}")
        print(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {successful_pings + failed_pings}")
        
        if successful_pings > 0:
            print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {successful_pings} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:")
            for server_name, server_data in inventory['all']['children']['servers']['hosts'].items():
                print(f"   - {server_name}: {server_data['ansible_host']} ({server_data['server_domain']})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è actual_servers.yml –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤ vpn-*.tgvpnbot.com"
    )
    
    parser.add_argument(
        'start', 
        type=int, 
        help='–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2)'
    )
    
    parser.add_argument(
        'end', 
        type=int, 
        help='–ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5)'
    )
    
    parser.add_argument(
        '--domain-template', 
        default='vpn-{}.tgvpnbot.com',
        help='–®–∞–±–ª–æ–Ω –¥–æ–º–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: vpn-{}.tgvpnbot.com)'
    )
    
    parser.add_argument(
        '--output', 
        default='actual_servers.yml',
        help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: actual_servers.yml)'
    )
    
    parser.add_argument(
        '--ansible-user', 
        default='vpnuser',
        help='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Ansible (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: vpnuser)'
    )
    
    parser.add_argument(
        '--ansible-port', 
        type=int,
        default=11041,
        help='–ü–æ—Ä—Ç SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 11041)'
    )
    
    
    args = parser.parse_args()
    
    if args.start > args.end:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ")
        sys.exit(1)
    
    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inventory –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ {args.start}-{args.end}")
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {args.ansible_user}")
    print(f"üîå –ü–æ—Ä—Ç: {args.ansible_port}")
    print()
    
    generate_inventory(
        start_num=args.start,
        end_num=args.end,
        domain_template=args.domain_template,
        output_file=args.output,
        ansible_user=args.ansible_user,
        ansible_port=args.ansible_port
    )


if __name__ == "__main__":
    main()
