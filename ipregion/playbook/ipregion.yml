- name: Деплой и запуск ipregion.sh
  hosts: all
  become: yes
  serial: 10
  strategy: free
  vars:
    ipregion_script_url: "https://raw.githubusercontent.com/Davoyan/ipregion/main/ipregion.sh"
    ipregion_script_path: "/usr/local/bin/ipregion.sh"
    ipregion_json_path: "/tmp/ipregion.json"
  tasks:
    - name: Проверить, есть ли уже ipregion.sh
      stat:
        path: "{{ ipregion_script_path }}"
      register: ipregion_exists

    - name: Скачать ipregion.sh, если его нет
      get_url:
        url: "{{ ipregion_script_url }}"
        dest: "{{ ipregion_script_path }}"
        mode: '0755'
      when: not ipregion_exists.stat.exists

    - name: Установить зависимости для (bash, curl, jq)
      package:
        name:
          - bash
          - curl
          - jq
          - bsdextrautils
          - bsdmainutils
          - ncal
        state: present

    - name: Запустить скрипт ipregion.sh с выводом в json
      command: "{{ ipregion_script_path }} --json"
      register: ipregion_json
      changed_when: false

    - name: Сохранить вывод в файл на сервере
      copy:
        content: "{{ ipregion_json.stdout }}"
        dest: "{{ ipregion_json_path }}"
        mode: '0644'

- name: Скачиваем json с серверов на ansible-управляющий сервер
  hosts: localhost
  gather_facts: yes
  vars:
    ipregion_output_dir: "/etc/ipregion"
  tasks:
    - name: Создать директории для каждого сервера
      file:
        path: "{{ ipregion_output_dir }}/{{ item }}/"
        state: directory
        mode: '0755'
      loop: "{{ groups['servers'] }}"
      delegate_to: localhost

    - name: Скопировать ipregion.json с каждого сервера
      fetch:
        src: /tmp/ipregion.json
        dest: "{{ ipregion_output_dir }}/{{ item }}/ipregion-{{ item }}-{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}.json"
        flat: yes
      loop: "{{ groups['servers'] }}"
      delegate_to: "{{ item }}"

    - name: Найти все файлы ipregion для каждого сервера
      find:
        paths: "{{ ipregion_output_dir }}/{{ item }}/"
        patterns: "ipregion-{{ item }}-*.json"
      register: server_files
      loop: "{{ groups['servers'] }}"
      delegate_to: localhost

    - name: Оставить только последние 3 файла для каждого сервера
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ (server_files.results | map(attribute='files') | flatten | sort(attribute='mtime', reverse=true))[3:] }}"
      when: server_files.results | map(attribute='files') | flatten | length > 3
      delegate_to: localhost
