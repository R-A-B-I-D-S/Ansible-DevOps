- name: Деплой и запуск ipregion.sh
  hosts: 3X-UI
  become: yes
  vars:
    ipregion_script_url: "https://raw.githubusercontent.com/Official-VPN/Telegraph-Images/refs/heads/main/ipregion.sh"
    ipregion_script_path: "/usr/local/bin/ipregion.sh"
    ipregion_json_path: "/tmp/ipregion.json"
  tasks:
    - name: Удалить старый ipregion.sh
      file:
        path: "{{ ipregion_script_path }}"
        state: absent

    - name: Скачать ipregion.sh
      get_url:
        url: "{{ ipregion_script_url }}"
        dest: "{{ ipregion_script_path }}"
        mode: "0755"

    - name: Установить зависимости для (bash, curl, jq)
      package:
        name:
          - bash
          - curl
          - jq
          - bsdextrautils
          - bsdmainutils
          - ncal
          - dnsutils
        state: present

    - name: Запустить скрипт ipregion.sh с выводом в json
      command: "{{ ipregion_script_path }} --json"
      register: ipregion_json
      changed_when: false

    - name: Сохранить вывод в файл на сервере
      copy:
        content: "{{ ipregion_json.stdout }}"
        dest: "{{ ipregion_json_path }}"
        mode: "0644"

- name: Скачиваем json с серверов на ansible-управляющий сервер
  hosts: localhost
  gather_facts: yes
  vars:
    ipregion_output_dir: "/etc/ipregion"
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
  tasks:
    - name: Создать директории для каждого сервера
      file:
        path: "{{ ipregion_output_dir }}/{{ item }}/"
        state: directory
        mode: "0755"
      loop: "{{ groups['servers'] }}"
      delegate_to: localhost

    - name: Скопировать ipregion.json с каждого сервера
      fetch:
        src: /tmp/ipregion.json
        dest: "{{ ipregion_output_dir }}/{{ item }}/ipregion-{{ item }}-{{ timestamp }}.json"
        flat: yes
      loop: "{{ groups['servers'] }}"
      delegate_to: "{{ item }}"

    - name: Найти все файлы ipregion для каждого сервера
      find:
        paths: "{{ ipregion_output_dir }}/{{ item }}/"
        patterns: "ipregion-{{ item }}-*.json"
      register: server_files
      loop: "{{ groups['servers'] }}"
      delegate_to: localhost

    - name: Переименовать файлы с нумерацией для каждого сервера
      shell: |
        cd "{{ ipregion_output_dir }}/{{ item }}/"

        # Создать временную директорию для сортировки
        mkdir -p temp_sort

        # Переместить все файлы (старые с нумерацией и новые) во временную директорию
        mv [0-9]-{{ item }}-*.json temp_sort/ 2>/dev/null || true
        mv ipregion-{{ item }}-*.json temp_sort/ 2>/dev/null || true

        # Переименовать все файлы с нумерацией, оставив только 3 самых новых
        counter=1
        for file in $(ls -t temp_sort/*.json); do
          if [ $counter -le 3 ]; then
            # Извлекаем только дату и время из имени файла
            filename=$(basename "$file")
            timestamp=$(echo "$filename" | sed "s/^[0-9]-{{ item }}-//" | sed "s/^ipregion-{{ item }}-//" | sed "s/\.json$//")
            mv "$file" "${counter}-{{ item }}-${timestamp}.json"
            counter=$((counter + 1))
          else
            rm -f "$file"
          fi
        done

        # Удалить временную директорию
        rmdir temp_sort 2>/dev/null || true
      loop: "{{ groups['servers'] }}"
      delegate_to: localhost

- import_playbook: ./ipregion_analyzer.yml
