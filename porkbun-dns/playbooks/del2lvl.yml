---
- name: üßπ –£–¥–∞–ª–∏—Ç—å A-–∑–∞–ø–∏—Å–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –∏–∑ Porkbun
  hosts: localhost
  gather_facts: no

  vars:
    domains_to_process: "{{ target_domains }}"  # –î–æ–º–µ–Ω—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è (apex)

  tasks:

    # --- –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥ –∏–∑ Remnawave ---
    - name: üåê –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã –∏–∑ Remnawave
      uri:
        url: "https://{{ remnawave_domain }}/api/nodes"
        method: GET
        headers:
          Authorization: "Bearer {{ remnawave_token }}"
        return_content: yes
        timeout: 30
      register: remnawave_response
      until: remnawave_response.status == 200
      retries: 3
      delay: 5

    - name: ‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É Remnawave API
      fail:
        msg: "Remnawave API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {{ remnawave_response.json.message | default('Unknown error') }}"
      when: remnawave_response.json is defined and remnawave_response.json.errorCode is defined

    - name: üß© –ò–∑–≤–ª–µ—á—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã
      set_fact:
        active_nodes: >-
          {{
            remnawave_response.json.response
            | selectattr('isNodeOnline', 'equalto', true)
            | list
          }}
        inactive_nodes: >-
          {{
            remnawave_response.json.response
            | selectattr('isNodeOnline', 'equalto', false)
            | list
          }}

    - name: üìÑ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥
      debug:
        msg: |-
          –ê–ö–¢–ò–í–ù–´–ï –ù–û–î–´ ({{ active_nodes | length }} —à—Ç.):
          {% for node in active_nodes %}
          {{ "%2d" % loop.index }}) {{ node.name }} ‚Üí {{ node.address }}
          {% endfor %}
          ---
          –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ù–û–î–´ ({{ inactive_nodes | length }} —à—Ç.):
          {% for node in inactive_nodes %}
          {{ "%2d" % loop.index }}) {{ node.name }} ‚Üí {{ node.address }}
          {% endfor %}

    - name: üü° –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
      debug:
        msg: "–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –≤ Remnawave. –£–¥–∞–ª–µ–Ω–∏–µ DNS –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
      when: inactive_nodes | length == 0

    # --- –®–ê–ì 2: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞ ---
    - name: üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞
      uri:
        url: "https://api.porkbun.com/api/json/v3/dns/retrieve/{{ item }}"
        method: POST
        body:
          apikey: "{{ porkbun_api_key }}"
          secretapikey: "{{ porkbun_secret_api_key }}"
        body_format: json
        return_content: yes
      register: dns_retrieve_results
      ignore_errors: yes
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"

    # --- –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ Porkbun API ---
    - name: ‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ Porkbun API
      fail:
        msg: "Porkbun API error for {{ item }}: {{ result.json.message | default('Unknown') }}"
      when: result.json is defined and result.json.status != "SUCCESS"
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"
      vars:
        result: "{{ dns_retrieve_results.results | selectattr('item', 'equalto', item) | first }}"

    # --- –®–ê–ì 4: –°–æ–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–µ A-–∑–∞–ø–∏—Å–∏ ---
    - name: üß© –ü–æ—Å—Ç—Ä–æ–∏—Ç—å existing_ips_map (A-–∑–∞–ø–∏—Å–∏ apex-–¥–æ–º–µ–Ω–æ–≤)
      set_fact:
        existing_ips_map: >-
          {%
            set result = existing_ips_map | default({})
          %}
          {%
            for domain in domains_to_process
          %}
            {%
              set records = (
                (dns_retrieve_results.results | selectattr('item', 'equalto', domain) | first).json.records | default([])
              )
              | selectattr('type', 'equalto', 'A')
              | selectattr('name', 'equalto', domain)
              | map(attribute='content')
              | map('trim')
              | list
            %}
            {%
              set _ = result.update({domain: records})
            %}
          {%
            endfor
          %}
          {{ result }}
      when: dns_retrieve_results is defined

    - name: üêû DEBUG ‚Äî existing_ips_map
      debug:
        var: existing_ips_map

    # --- –®–ê–ì 5: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ---
    - name: üß© –ü–æ—Å—Ç—Ä–æ–∏—Ç—å inactive_ips_map
      set_fact:
        inactive_ips_map: >-
          {{
            inactive_ips_map | default({}) | combine({
              domain: (
                existing_ips_map[domain] | default([]) | map('trim') | list
                | intersect(inactive_nodes | map(attribute='address') | map('trim') | list)
              )
            })
          }}
      loop: "{{ domains_to_process }}"
      loop_control:
        loop_var: domain
        label: "{{ domain }}"

    - name: üêû DEBUG ‚Äî inactive_ips_map (IP –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
      debug:
        var: inactive_ips_map

    # --- –®–ê–ì 6: –£–¥–∞–ª–∏—Ç—å A-–∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö IP ---
    - name: üóëÔ∏è –£–¥–∞–ª–∏—Ç—å A-–∑–∞–ø–∏—Å–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥
      vars:
        domain: "{{ item }}"
        records: "{{ (dns_retrieve_results.results | selectattr('item', 'equalto', domain) | first).json.records | default([]) }}"
      loop: "{{ domains_to_process }}"
      loop_control:
        label: "{{ item }}"
      when: inactive_ips_map[domain] | length > 0
      block:

        - name: üß© –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          set_fact:
            records_to_delete: >-
              {{
                records
                | selectattr('type', 'equalto', 'A')
                | selectattr('name', 'equalto', domain)
                | selectattr('content', 'in', inactive_ips_map[domain])
                | list
              }}

        - name: üóëÔ∏è –£–¥–∞–ª–∏—Ç—å A-–∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ API
          uri:
            url: "https://api.porkbun.com/api/json/v3/dns/delete/{{ domain }}/{{ record.id }}"
            method: POST
            body:
              apikey: "{{ porkbun_api_key }}"
              secretapikey: "{{ porkbun_secret_api_key }}"
            body_format: json
            status_code: 200
          loop: "{{ records_to_delete }}"
          loop_control:
            loop_var: record
            label: "{{ domain }} ‚Üí {{ record.content }}"
          register: delete_results
          ignore_errors: yes

        - name: ‚úÖ –û—Ç—á—ë—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
          debug:
            msg: |-
              ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ {{ domain }}: {{ delete_results.results | length }}
              {% for rec in delete_results.results %}
              - {{ domain }} ‚Üí {{ rec.item.content }}
              {% endfor %}

    # --- –®–ê–ì 7: –ï—Å–ª–∏ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ---
    - name: ‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      debug:
        msg: "–í—Å–µ DNS A-–∑–∞–ø–∏—Å–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –Ω–æ–¥–∞–º ‚Äî —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ."
      when: inactive_ips_map | dict2items | map(attribute='value') | map('length') | sum == 0

    # --- –§–ò–ù–ê–õ: –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ ---
    - name: üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
      debug:
        msg: |-
          –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.

          –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥: {{ active_nodes | length }}
          –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥: {{ inactive_nodes | length }}
          –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {{ domains_to_process | length }}
